var search_data = {"index":{"searchIndex":["geojsonrackapptester","rack","geojsonrackapp","call()","test_point_posting()","test_polygon_function()","test_radius_function()","readme","geojson_rack_app.ru"],"longSearchIndex":["geojsonrackapptester","rack","rack::geojsonrackapp","rack::geojsonrackapp#call()","geojsonrackapptester#test_point_posting()","geojsonrackapptester#test_polygon_function()","geojsonrackapptester#test_radius_function()","",""],"info":[["GeojsonRackAppTester","","GeojsonRackAppTester.html","","<p>Tester for the GeojsonRackApp. Submits requests to the application, and compares the results to expected …\n"],["Rack","","Rack.html","",""],["Rack::GeojsonRackApp","","Rack/GeojsonRackApp.html","","<p>This class handles requests for GeoJSON data. POST requests with either an array of GeoJSON Points or …\n"],["call","Rack::GeojsonRackApp","Rack/GeojsonRackApp.html#method-i-call","(env)","<p>Responds to GET and POST request methods for GeoJSON data. Returns HTTP status code 200 if the request …\n"],["test_point_posting","GeojsonRackAppTester","GeojsonRackAppTester.html#method-i-test_point_posting","()","<p>Test cases for sending points via a POST request\n"],["test_polygon_function","GeojsonRackAppTester","GeojsonRackAppTester.html#method-i-test_polygon_function","()","<p>Test cases for determining which points fall within the area of the given polygon\n"],["test_radius_function","GeojsonRackAppTester","GeojsonRackAppTester.html#method-i-test_radius_function","()","<p>Test cases for determining which points fall within the radius of a given point\n"],["README","","README_md.html","","<p>To start the docker instance, navigate to the directory with your docker-compose.yml file, and run the …\n"],["geojson_rack_app.ru","","geojson_rack_app_ru.html","","<p># frozen_string_literal: true\n<p>require_relative &#39;geojson_rack_app&#39;\n<p>use Rack::ShowExceptions run …\n"]]}}